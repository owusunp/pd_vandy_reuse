{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n  // Check if there is an error message\n  if (images.length < 1 || images.length > 3) {\n    alert(\"Please resolve the errors before submitting.\");\n    return;\n  }\n  const imageUrls = await uploadImages(images);\n  const newItem = {\n    name: itemName,\n    description,\n    vendor: userName,\n    price: `$${price}`,\n    list_of_images: imageUrls,\n    date_posted: new Date().toISOString().split('T')[0],\n    sold: false,\n    category: \"Miscellaneous\"\n  };\n  try {\n    const response = await axios.post('http://127.0.0.1:8000/api/v1/items/', newItem);\n    newItem._id = response.data; // Assuming the response contains the new item's ID\n\n    // Create a notification\n    const newNotification = {\n      poster: userName,\n      description: `New item posted: ${itemName}`,\n      date_posted: new Date().toISOString(),\n      is_read: false\n    };\n    await axios.post('http://127.0.0.1:8000/api/v1/notifications/sell_notification', newNotification);\n\n    // Retrieve existing items from sessionStorage\n    const storedItems = sessionStorage.getItem('items');\n    let itemsArray = storedItems ? JSON.parse(storedItems) : [];\n\n    // Add the new item to the items array\n    itemsArray.push(newItem);\n\n    // Store the updated items array in sessionStorage\n    sessionStorage.setItem('items', JSON.stringify(itemsArray));\n    alert(\"Item posted successfully!\");\n  } catch (error) {\n    console.error('Error creating item:', error.response ? error.response.data : error.message);\n    alert(\"Failed to post item.\");\n  }\n  setUserName('');\n  setItemName('');\n  setDescription('');\n  setPrice('');\n  setImages([]);\n  setErrorMessage('');\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","images","length","alert","imageUrls","uploadImages","newItem","name","itemName","description","vendor","userName","price","list_of_images","date_posted","Date","toISOString","split","sold","category","response","axios","post","_id","data","newNotification","poster","is_read","storedItems","sessionStorage","getItem","itemsArray","JSON","parse","push","setItem","stringify","error","console","message","setUserName","setItemName","setDescription","setPrice","setImages","setErrorMessage"],"sources":["/workspaces/pd_vandy_reuse/frontend/vandy-reuse-marketplace/src/pages/SellItem.jsx"],"sourcesContent":["const handleSubmit = async (e) => {\n  e.preventDefault();\n  // Check if there is an error message\n  if (images.length < 1 || images.length > 3) {\n    alert(\"Please resolve the errors before submitting.\");\n    return;\n  }\n  const imageUrls = await uploadImages(images);\n  const newItem = {\n    name: itemName,\n    description,\n    vendor: userName,\n    price: `$${price}`,\n    list_of_images: imageUrls,\n    date_posted: new Date().toISOString().split('T')[0],\n    sold: false,\n    category: \"Miscellaneous\",\n  };\n\n  try {\n    const response = await axios.post('http://127.0.0.1:8000/api/v1/items/', newItem);\n    newItem._id = response.data; // Assuming the response contains the new item's ID\n\n    // Create a notification\n    const newNotification = {\n      poster: userName,\n      description: `New item posted: ${itemName}`,\n      date_posted: new Date().toISOString(),\n      is_read: false,\n    };\n\n    await axios.post('http://127.0.0.1:8000/api/v1/notifications/sell_notification', newNotification);\n\n    // Retrieve existing items from sessionStorage\n    const storedItems = sessionStorage.getItem('items');\n    let itemsArray = storedItems ? JSON.parse(storedItems) : [];\n\n    // Add the new item to the items array\n    itemsArray.push(newItem);\n\n    // Store the updated items array in sessionStorage\n    sessionStorage.setItem('items', JSON.stringify(itemsArray));\n    alert(\"Item posted successfully!\");\n  } catch (error) {\n    console.error('Error creating item:', error.response ? error.response.data : error.message);\n    alert(\"Failed to post item.\");\n  }\n  setUserName('');\n  setItemName('');\n  setDescription('');\n  setPrice('');\n  setImages([]);\n  setErrorMessage('');\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB;EACA,IAAIC,MAAM,CAACC,MAAM,GAAG,CAAC,IAAID,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IAC1CC,KAAK,CAAC,8CAA8C,CAAC;IACrD;EACF;EACA,MAAMC,SAAS,GAAG,MAAMC,YAAY,CAACJ,MAAM,CAAC;EAC5C,MAAMK,OAAO,GAAG;IACdC,IAAI,EAAEC,QAAQ;IACdC,WAAW;IACXC,MAAM,EAAEC,QAAQ;IAChBC,KAAK,EAAE,IAAIA,KAAK,EAAE;IAClBC,cAAc,EAAET,SAAS;IACzBU,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnDC,IAAI,EAAE,KAAK;IACXC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,qCAAqC,EAAEhB,OAAO,CAAC;IACjFA,OAAO,CAACiB,GAAG,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;;IAE7B;IACA,MAAMC,eAAe,GAAG;MACtBC,MAAM,EAAEf,QAAQ;MAChBF,WAAW,EAAE,oBAAoBD,QAAQ,EAAE;MAC3CM,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACrCW,OAAO,EAAE;IACX,CAAC;IAED,MAAMN,KAAK,CAACC,IAAI,CAAC,8DAA8D,EAAEG,eAAe,CAAC;;IAEjG;IACA,MAAMG,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IACnD,IAAIC,UAAU,GAAGH,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,GAAG,EAAE;;IAE3D;IACAG,UAAU,CAACG,IAAI,CAAC5B,OAAO,CAAC;;IAExB;IACAuB,cAAc,CAACM,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACL,UAAU,CAAC,CAAC;IAC3D5B,KAAK,CAAC,2BAA2B,CAAC;EACpC,CAAC,CAAC,OAAOkC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACjB,QAAQ,GAAGiB,KAAK,CAACjB,QAAQ,CAACI,IAAI,GAAGa,KAAK,CAACE,OAAO,CAAC;IAC3FpC,KAAK,CAAC,sBAAsB,CAAC;EAC/B;EACAqC,WAAW,CAAC,EAAE,CAAC;EACfC,WAAW,CAAC,EAAE,CAAC;EACfC,cAAc,CAAC,EAAE,CAAC;EAClBC,QAAQ,CAAC,EAAE,CAAC;EACZC,SAAS,CAAC,EAAE,CAAC;EACbC,eAAe,CAAC,EAAE,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}